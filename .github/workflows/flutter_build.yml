# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build flutter app

on:
  push:
    branches: [ 
      "flutter/test", 
      "flutter/release", 
      "flutter/test/*", 
      "flutter/release/*",
    ]

env:
  flutter_version: 3.19.6
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
  PROJECT_NAME: ""
  FLUTTER_PROJECT_LIST: ("curriculum" "currency_conversion" "maio_photos" "playsee_story" "meep_todo")

  TEST_BRANCH_PRIFIX: flutter/test
  RELEASE_BRANCH_PRIFIX: flutter/release
  APP_PATH: ""

  AAB_PATH: build/app/outputs/bundle/release/app-release.aab
  KEYSTORE_PATH: upload-keystore.jks
  KEY_PROPS_PATH: key.properties
  SERVICE_ACCOUNT_PATH: store_credentials.json
  APPLICATION_ID: com.src.kafka

jobs:
  flutter-job:
    runs-on: macOS-latest
    outputs:
      project_name: ${{ steps.project_name_step.outputs.project_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if github.head_ref is in array
        id: build
        run: |
          array=${{ env.FLUTTER_PROJECT_LIST }}
          IN="${{ env.BRANCH_NAME }}"
          read -ra paths <<< "$(echo $IN | sed 's/[\/-]/ /g')"

          echo "paths:  ${paths[@]}"
          echo "project list:  ${array[@]}"

          for path in "${paths[@]}"
          do
            for item in "${array[@]}"; 
            do
              if [[ "$path" == "$item" ]]; then
                echo "PROJECT_NAME=$item" >> $GITHUB_ENV
                break 2
              fi
            done
          done
          

      - name: Project name
        id: project_name_step
        run: |
          echo "Project name is: ${{ env.PROJECT_NAME }}"
          echo "::set-output name=project_name::${{ env.PROJECT_NAME }}"

      - uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'gradle'

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}
          
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.flutter_version }}
          cache: true

      - name: Check if tags are fetched
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          git tag -l

      - name: Extract version and version code from git tag
        id: extract_version
        run: |
          TAG_NAME=$(git describe --tags --abbrev=0)
          VERSION_NAME=$(echo $TAG_NAME | sed 's/^v//')
          VERSION_CODE=$(echo $VERSION_NAME | awk -F. '{print $1$2$3}')
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

      - name: Update version in pubspec.yaml
        run: |
          sed -i '' "s/^version:.*/version: $VERSION_NAME/" ${{ env.PROJECT_NAME }}/pubspec.yaml
          cat ${{ env.PROJECT_NAME }}/pubspec.yaml

      - name: Update version code in Android's build.gradle
        run: |
          sed -i '' "s/versionCode [0-9]*/versionCode $VERSION_CODE/" ${{ env.PROJECT_NAME }}/android/app/build.gradle
          sed -i '' "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" ${{ env.PROJECT_NAME }}/android/app/build.gradle
          cat ${{ env.PROJECT_NAME }}/android/app/build.gradle

      - name: Install dependencies
        run: cd ${{ env.PROJECT_NAME }} && flutter pub get

      - name: Generate files
        run: cd ${{ env.PROJECT_NAME }}  && flutter pub run build_runner build --delete-conflicting-outputs

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: cd ${{ env.PROJECT_NAME }}  && flutter analyze
          
      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: |
          if [ -d "${{ env.PROJECT_NAME }}/test" ]; then
            cd ${{ env.PROJECT_NAME }} && flutter test
          else
            echo "No 'test' directory found. Skipping 'flutter test'"
          fi

      - name: Extract Android applicationId
        run: |
          APPLICATION_ID=$(grep 'applicationId' ${{ env.PROJECT_NAME }}/android/app/build.gradle | sed 's/.*applicationId[[:space:]]*"[[:space:]]*//; s/"//g')
          echo "Application Id: $APPLICATION_ID"
          echo "APPLICATION_ID=$APPLICATION_ID" >> $GITHUB_ENV

      - name: Build debug apk
        if: startsWith(env.BRANCH_NAME, env.TEST_BRANCH_PRIFIX)
        run: |
            cd ${{ env.PROJECT_NAME }} && flutter build apk --debug
            echo "APP_PATH=${{ env.PROJECT_NAME }}/build/app/outputs/flutter-apk/app-debug.apk" >> $GITHUB_ENV
      
      - uses: actions/upload-artifact@v4
        if: startsWith(env.BRANCH_NAME, env.TEST_BRANCH_PRIFIX)
        with: 
          name: app-dubug.apk
          path: ${{ env.APP_PATH }}

      - name: Setting signing release andoid
        run: |
          echo "${{ secrets.KAFKA_ANDROID_KEY_STORE }}" | base64 --decode > ${{ env.KEYSTORE_PATH }}
          echo "${{ secrets.KAFKA_ANDROID_KEY_PROPERTIES }}" | base64 --decode > ${{ env.KEY_PROPS_PATH }}
          echo "${{ secrets.KAFKA_ANDROID_RELEASE_SERVICE_ACCOUNT }}" | base64 --decode > ${{ env.SERVICE_ACCOUNT_PATH }}

      - name: Build release apk
        if: startsWith(env.BRANCH_NAME, env.RELEASE_BRANCH_PRIFIX)
        run: |
          cd ${{ env.PROJECT_NAME }} && flutter build apk --release
          echo "APP_PATH=${{ env.PROJECT_NAME }}/build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_ENV
          
      - uses: actions/upload-artifact@v4
        if: startsWith(env.BRANCH_NAME, env.RELEASE_BRANCH_PRIFIX)
        with: 
          name: app-release.apk
          path: ${{ env.APP_PATH }}

      - name: Build release aab
        if: startsWith(env.BRANCH_NAME, env.RELEASE_BRANCH_PRIFIX)
        run: |
          cd ${{ env.PROJECT_NAME }} && flutter build appbundle --release
          echo "AAB_PATH=${{ env.PROJECT_NAME }}/build/app/outputs/bundle/release/app-release.aab" >> $GITHUB_ENV

      - name: Upload generated aab to the artifacts
        if: startsWith(env.BRANCH_NAME, env.RELEASE_BRANCH_PRIFIX)
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: ${{ env.AAB_PATH }}

      # Deploy bundle to Google Play internal testing
      - name: Deploy to Play Store (Internal testing)
        if: startsWith(env.BRANCH_NAME, env.RELEASE_BRANCH_PRIFIX)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ env.SERVICE_ACCOUNT_PATH }}
          packageName: ${{ env.APPLICATION_ID }}
          releaseFiles: ${{ env.AAB_PATH }}
          track: internal
          whatsNewDirectory: distribution/whatsnew
    
          