# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build flutter app

on:
  push:
    branches: [ 
      "flutter/test", 
      "flutter/release", 
      "flutter/test/*", 
      "flutter/release/*",
    ]

env:
  flutter_version: 3.19.6
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 
  PROJECT_NAME: ""
  FLUTTER_PROJECT_LIST: ("curriculum" "currency_conversion" "maio_photos" "playsee_story" "meep_todo")
  APP_PATH: ""

  AAB_PATH: build/app/outputs/bundle/release/app-release.aab
  KEYSTORE_PATH: ../kafka/upload-keystore.jks
  KEY_PROPS_PATH: ../kafka/key.properties
  SERVICE_ACCOUNT_PATH: ../kafka/store_credentials.json
  PACKAGE_NAME: com.src.kafka

jobs:
  flutter-build:
    runs-on: macOS-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if github.head_ref is in array
        id: build
        run: |
          array=${{ env.FLUTTER_PROJECT_LIST }}
          IN="${{ env.BRANCH_NAME }}"
          read -ra paths <<< "$(echo $IN | sed 's/[\/-]/ /g')"

          echo "paths:  ${paths[@]}"
          echo "project list:  ${array[@]}"

          for path in "${paths[@]}"
          do
            for item in "${array[@]}"; 
            do
              if [[ "$path" == "$item" ]]; then
                echo "PROJECT_NAME=$item" >> $GITHUB_ENV
                break 2
              fi
            done
          done
          

      - name: Project name
        run: |
          echo "Project name is: ${{ env.PROJECT_NAME }}"

      - uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Cache Flutter dependencies
        uses: actions/cache@v1
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}
          
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ env.flutter_version }}
          cache: true

      - name: Install dependencies
        run: cd ${{ env.PROJECT_NAME }} && flutter pub get

      - name: Generate files
        run: cd ${{ env.PROJECT_NAME }}  && flutter pub run build_runner build --delete-conflicting-outputs

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: cd ${{ env.PROJECT_NAME }}  && flutter analyze
          
      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: |
          if [ -d "${{ env.PROJECT_NAME }}/test" ]; then
            cd ${{ env.PROJECT_NAME }} && flutter test
          else
            echo "No 'test' directory found. Skipping 'flutter test'"
          fi
  
      - name: Build debug apk
        if: startsWith(github.head_ref, 'flutter/test')
        # Build Android app apk
        run: |
            cd ${{ env.PROJECT_NAME }} && flutter build apk --debug
            echo "APP_PATH=${{ env.PROJECT_NAME }}/build/app/outputs/flutter-apk/app-debug.apk" >> $GITHUB_ENV
        

      - name: Build release apk
        if: startsWith(github.head_ref, 'flutter/release')
        run: |
          cd ${{ env.PROJECT_NAME }} && flutter build apk
          echo "APP_PATH=${{ env.PROJECT_NAME }}/build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_ENV
      
      - uses: actions/upload-artifact@v4
        with: 
          name: upload android apk
          path: ${{ env.APP_PATH }}

      
      - name: Build release aab
        if: startsWith(github.head_ref, 'flutter/release')
        run: |
          echo "${{ secrets.KAFKA_ANDROID_KEY_STORE }}" | base64 --decode > ${{ env.KEYSTORE_PATH }}
          echo "${{ secrets.KAFKA_ANDROID_KEY_PROPERTIES }}" | base64 --decode > ${{ env.KEY_PROPS_PATH }}
          echo "${{ secrets.KAFKA_ANDROID_RELEASE_SERVICE_ACCOUNT }}" | base64 --decode > ${{ env.SERVICE_ACCOUNT_PATH }}
          cd ${{ env.PROJECT_NAME }} && flutter build appbundle --release
          echo "AAB_PATH=${{ env.PROJECT_NAME }}/build/app/outputs/flutter-apk/app-release.aab" >> $GITHUB_ENV


      # Upload generated aab to project artifacts
      - name: Upload generated aab to the artifacts
        uses: actions/upload-artifact@master
        with:
          name: aab-stores
          path: ${{ env.AAB_PATH }}

      # Deploy bundle to Google Play internal testing
      - name: Deploy to Play Store (Internal testing)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ env.SERVICE_ACCOUNT_PATH }}
          packageName: ${{ env.PACKAGE_NAME }}
          releaseFiles: ${{ env.AAB_PATH }}
          track: internal
    
          